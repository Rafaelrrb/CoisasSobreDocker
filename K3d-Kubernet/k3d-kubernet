/* PRECISA JA TER INSTALADO O DOCKER */

/* LINKS */

KIND = https://kind.sigs.k8s.io/docs/user/quick-start/#installation

KUBECTL = https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

K3D https://k3d.io/v5.2.2/

/* CRIANDO CLUSTER */

sudo k3d cluster create/* cria um cluster */

sudo kubectl get nodes /* lista nos do cluster */

sudo kind get clusters /* lista os cluster criados com kind */

sudo k3d cluster create meucluster --no-lb /* criando cluster e dando um nome */

sudo k3d cluster list /* lista os clusters criados */

sudo k3d cluster delete (nome do cluster)  /* deleta clusters criados caso não informe o parametro ele deleta o cluster default */

sudo k3d cluster create meucluster --servers 3 --agents 3 /* multiplas maquinas */ 


/* DEPLOY NO KUBERNET */

POD /* cada pod deve armazenar uma api diferente pra se conectar depois para escalar individualmente */

sudo kubectl api-resources /* consultar grupo de recursos das apiVersion  pra isso antes deve estar rodando um sudo k3d cluster create meucluster --servers 1 --agents 1 */

sudo kubectl create -f pod.yaml /* comando que cria o pod aplica os comandos no kubernet */

sudo kubectl apply -f pod.yaml /* dar preferenica a esse comando para criar os pods */

sudo kubectl get pods /* lista os pod */

sudo kubectl describe pod/meupod /* da mais detalhes do pod criado */

sudo kubectl port-forward pod/meupod 8080:80 /* direciona as portas */

sudo kubectl delete pod meupod /* deleta o pod */

/* LABELS E SELECTORS */

label /* usada pra marcar o objeto é um elemento chave valor */

sudo kubectl apply -f meupod.yaml /* cria pod */

sudo kubectl get pods /* lista pods */

selector /* usado pra selecionar esse objeto pela chave */

sudo kubectl get pods app=web /* usa a lebel pra selecionar o pod */

/* REPLICASET */

replicas: 3
template: Pod   /* sempre avera 3 pod caso um seja eliminado vai ser criado outro pra subestituir */

sudo kubectl api-resources | grep ReplicaSet /* busca para ver a apiVersion */

sudo kubectl apply -f meureplicaset.yaml /* executa */

sudo kubectl get replicaset /* lista */

/* caso eu mude a versão ele nao atualiza isso a não ser que eu delete um pod dai ele recria com a imagem nova */

/*  DEPLOYMENT */

/* controla as mudanças de versão melhor escolha na hora de criar pods */

Deployment => ReplicaSet => Pod

/* SERVICES */


ClusterIP /* acesso interno  */
NodePort /* acesso externo  */
LoadBalancer /* cria um ip pra acessar o service em nuvem */

sudo k3d cluster create meucluster --servers 1 --agents 1 -p "8080:30000@loadbalancer" /* recriando o cluster agora dando uma porta pra ele usar */


/* CRIANDO APLICAÇÃO */

/* ROTTEN-POTATOES-MAIN apenas uma exemplo pronto nada foi criado  */

sudo docker build -t rrborba/rotten-potatoes:v1 . /* constroi a imagem */

sudo docker login

sudo docker push rrborba/rotten-potatoes:v1

sudo docker tag rrborba/rotten-potatoes:v1 rrborba/rotten-potatoes:latest

sudo docker push rrborba/rotten-potatoes:latest

/* pasta K8S criada para configurar MongoDB para a aplicação ROTTEN-POTATOES-MAIN */

sudo kubectl apply -f deployment.yaml /* dentro da pasta K8S */

sudo kubectl get pods

sudo kubectl get service

sudo kubectl get all